// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::IsA;
use glib::translate::*;
use gobject;
use ibus_sys;
use std::fmt;
use Attribute;
use Object;
use Serializable;

glib_wrapper! {
    pub struct AttrList(Object<ibus_sys::IBusAttrList, ibus_sys::IBusAttrListClass, AttrListClass>) @extends Serializable, Object, gobject::InitiallyUnowned;

    match fn {
        get_type => || ibus_sys::ibus_attr_list_get_type(),
    }
}

impl AttrList {
    pub fn new() -> AttrList {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ibus_sys::ibus_attr_list_new())
        }
    }
}

impl Default for AttrList {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_ATTR_LIST: Option<&AttrList> = None;

pub trait AttrListExt: 'static {
    fn append<P: IsA<Attribute>>(&self, attr: &P);

    fn get(&self, index: u32) -> Option<Attribute>;
}

impl<O: IsA<AttrList>> AttrListExt for O {
    fn append<P: IsA<Attribute>>(&self, attr: &P) {
        unsafe {
            ibus_sys::ibus_attr_list_append(self.as_ref().to_glib_none().0, attr.as_ref().to_glib_none().0);
        }
    }

    fn get(&self, index: u32) -> Option<Attribute> {
        unsafe {
            from_glib_none(ibus_sys::ibus_attr_list_get(self.as_ref().to_glib_none().0, index))
        }
    }
}

impl fmt::Display for AttrList {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "AttrList")
    }
}
