// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib::StaticType;
use glib::Value;
use glib_sys;
use gobject;
use gobject_sys;
use ibus_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use Object;
use Serializable;

glib_wrapper! {
    pub struct ExtensionEvent(Object<ibus_sys::IBusExtensionEvent, ibus_sys::IBusExtensionEventClass, ExtensionEventClass>) @extends Serializable, Object, gobject::InitiallyUnowned;

    match fn {
        get_type => || ibus_sys::ibus_extension_event_get_type(),
    }
}

impl ExtensionEvent {
    //pub fn new(first_property_name: &str, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs) -> ExtensionEvent {
    //    unsafe { TODO: call ibus_sys:ibus_extension_event_new() }
    //}
}

pub const NONE_EXTENSION_EVENT: Option<&ExtensionEvent> = None;

pub trait ExtensionEventExt: 'static {
    fn get_name(&self) -> Option<GString>;

    fn get_params(&self) -> Option<GString>;

    fn get_version(&self) -> u32;

    fn is_enabled(&self) -> bool;

    fn is_extension(&self) -> bool;

    fn get_property_is_enabled(&self) -> bool;

    fn get_property_is_extension(&self) -> bool;

    fn connect_property_version_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<ExtensionEvent>> ExtensionEventExt for O {
    fn get_name(&self) -> Option<GString> {
        unsafe {
            from_glib_none(ibus_sys::ibus_extension_event_get_name(self.as_ref().to_glib_none().0))
        }
    }

    fn get_params(&self) -> Option<GString> {
        unsafe {
            from_glib_none(ibus_sys::ibus_extension_event_get_params(self.as_ref().to_glib_none().0))
        }
    }

    fn get_version(&self) -> u32 {
        unsafe {
            ibus_sys::ibus_extension_event_get_version(self.as_ref().to_glib_none().0)
        }
    }

    fn is_enabled(&self) -> bool {
        unsafe {
            from_glib(ibus_sys::ibus_extension_event_is_enabled(self.as_ref().to_glib_none().0))
        }
    }

    fn is_extension(&self) -> bool {
        unsafe {
            from_glib(ibus_sys::ibus_extension_event_is_extension(self.as_ref().to_glib_none().0))
        }
    }

    fn get_property_is_enabled(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"is-enabled\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `is-enabled` getter").unwrap()
        }
    }

    fn get_property_is_extension(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"is-extension\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `is-extension` getter").unwrap()
        }
    }

    fn connect_property_version_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_version_trampoline<P, F: Fn(&P) + 'static>(this: *mut ibus_sys::IBusExtensionEvent, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<ExtensionEvent>
        {
            let f: &F = &*(f as *const F);
            f(&ExtensionEvent::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::version\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_version_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for ExtensionEvent {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "ExtensionEvent")
    }
}
