// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::IsA;
use glib::translate::*;
use gobject;
use ibus_sys;
use std::fmt;
use Object;
use Serializable;
use XML;

glib_wrapper! {
    pub struct ObservedPath(Object<ibus_sys::IBusObservedPath, ibus_sys::IBusObservedPathClass, ObservedPathClass>) @extends Serializable, Object, gobject::InitiallyUnowned;

    match fn {
        get_type => || ibus_sys::ibus_observed_path_get_type(),
    }
}

impl ObservedPath {
    pub fn new(path: &str, fill_stat: bool) -> ObservedPath {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ibus_sys::ibus_observed_path_new(path.to_glib_none().0, fill_stat.to_glib()))
        }
    }

    pub fn from_xml_node(node: &mut XML, fill_stat: bool) -> ObservedPath {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ibus_sys::ibus_observed_path_new_from_xml_node(node.to_glib_none_mut().0, fill_stat.to_glib()))
        }
    }
}

pub const NONE_OBSERVED_PATH: Option<&ObservedPath> = None;

pub trait ObservedPathExt: 'static {
    fn check_modification(&self) -> bool;

    //fn output(&self, output: /*Ignored*/&mut glib::String, indent: i32);

    fn traverse(&self, dir_only: bool) -> Vec<ObservedPath>;
}

impl<O: IsA<ObservedPath>> ObservedPathExt for O {
    fn check_modification(&self) -> bool {
        unsafe {
            from_glib(ibus_sys::ibus_observed_path_check_modification(self.as_ref().to_glib_none().0))
        }
    }

    //fn output(&self, output: /*Ignored*/&mut glib::String, indent: i32) {
    //    unsafe { TODO: call ibus_sys:ibus_observed_path_output() }
    //}

    fn traverse(&self, dir_only: bool) -> Vec<ObservedPath> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ibus_sys::ibus_observed_path_traverse(self.as_ref().to_glib_none().0, dir_only.to_glib()))
        }
    }
}

impl fmt::Display for ObservedPath {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "ObservedPath")
    }
}
