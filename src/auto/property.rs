// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib_sys;
use gobject;
use ibus_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use Object;
use PropList;
use PropState;
use PropType;
use Serializable;
use Text;

glib_wrapper! {
    pub struct Property(Object<ibus_sys::IBusProperty, ibus_sys::IBusPropertyClass, PropertyClass>) @extends Serializable, Object, gobject::InitiallyUnowned;

    match fn {
        get_type => || ibus_sys::ibus_property_get_type(),
    }
}

impl Property {
    pub fn new<P: IsA<Text>, Q: IsA<Text>, R: IsA<PropList>>(key: &str, type_: PropType, label: &P, icon: Option<&str>, tooltip: &Q, sensitive: bool, visible: bool, state: PropState, prop_list: Option<&R>) -> Property {
        skip_assert_initialized!();
        unsafe {
            from_glib_none(ibus_sys::ibus_property_new(key.to_glib_none().0, type_.to_glib(), label.as_ref().to_glib_none().0, icon.to_glib_none().0, tooltip.as_ref().to_glib_none().0, sensitive.to_glib(), visible.to_glib(), state.to_glib(), prop_list.map(|p| p.as_ref()).to_glib_none().0))
        }
    }

    //pub fn new_varargs(first_property_name: &str, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs) -> Property {
    //    unsafe { TODO: call ibus_sys:ibus_property_new_varargs() }
    //}
}

pub const NONE_PROPERTY: Option<&Property> = None;

pub trait PropertyExt: 'static {
    fn get_icon(&self) -> Option<GString>;

    fn get_key(&self) -> Option<GString>;

    fn get_label(&self) -> Option<Text>;

    fn get_prop_type(&self) -> PropType;

    fn get_sensitive(&self) -> bool;

    fn get_state(&self) -> PropState;

    fn get_sub_props(&self) -> Option<PropList>;

    fn get_symbol(&self) -> Option<Text>;

    fn get_tooltip(&self) -> Option<Text>;

    fn get_visible(&self) -> bool;

    fn set_icon(&self, icon: &str);

    fn set_label<P: IsA<Text>>(&self, label: &P);

    fn set_sensitive(&self, sensitive: bool);

    fn set_state(&self, state: PropState);

    fn set_sub_props<P: IsA<PropList>>(&self, prop_list: &P);

    fn set_symbol<P: IsA<Text>>(&self, symbol: &P);

    fn set_tooltip<P: IsA<Text>>(&self, tooltip: &P);

    fn set_visible(&self, visible: bool);

    fn update<P: IsA<Property>>(&self, prop_update: &P) -> bool;

    fn connect_property_icon_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_label_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_sensitive_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_state_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_sub_props_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_symbol_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_tooltip_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_visible_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Property>> PropertyExt for O {
    fn get_icon(&self) -> Option<GString> {
        unsafe {
            from_glib_none(ibus_sys::ibus_property_get_icon(self.as_ref().to_glib_none().0))
        }
    }

    fn get_key(&self) -> Option<GString> {
        unsafe {
            from_glib_none(ibus_sys::ibus_property_get_key(self.as_ref().to_glib_none().0))
        }
    }

    fn get_label(&self) -> Option<Text> {
        unsafe {
            from_glib_none(ibus_sys::ibus_property_get_label(self.as_ref().to_glib_none().0))
        }
    }

    fn get_prop_type(&self) -> PropType {
        unsafe {
            from_glib(ibus_sys::ibus_property_get_prop_type(self.as_ref().to_glib_none().0))
        }
    }

    fn get_sensitive(&self) -> bool {
        unsafe {
            from_glib(ibus_sys::ibus_property_get_sensitive(self.as_ref().to_glib_none().0))
        }
    }

    fn get_state(&self) -> PropState {
        unsafe {
            from_glib(ibus_sys::ibus_property_get_state(self.as_ref().to_glib_none().0))
        }
    }

    fn get_sub_props(&self) -> Option<PropList> {
        unsafe {
            from_glib_none(ibus_sys::ibus_property_get_sub_props(self.as_ref().to_glib_none().0))
        }
    }

    fn get_symbol(&self) -> Option<Text> {
        unsafe {
            from_glib_none(ibus_sys::ibus_property_get_symbol(self.as_ref().to_glib_none().0))
        }
    }

    fn get_tooltip(&self) -> Option<Text> {
        unsafe {
            from_glib_none(ibus_sys::ibus_property_get_tooltip(self.as_ref().to_glib_none().0))
        }
    }

    fn get_visible(&self) -> bool {
        unsafe {
            from_glib(ibus_sys::ibus_property_get_visible(self.as_ref().to_glib_none().0))
        }
    }

    fn set_icon(&self, icon: &str) {
        unsafe {
            ibus_sys::ibus_property_set_icon(self.as_ref().to_glib_none().0, icon.to_glib_none().0);
        }
    }

    fn set_label<P: IsA<Text>>(&self, label: &P) {
        unsafe {
            ibus_sys::ibus_property_set_label(self.as_ref().to_glib_none().0, label.as_ref().to_glib_none().0);
        }
    }

    fn set_sensitive(&self, sensitive: bool) {
        unsafe {
            ibus_sys::ibus_property_set_sensitive(self.as_ref().to_glib_none().0, sensitive.to_glib());
        }
    }

    fn set_state(&self, state: PropState) {
        unsafe {
            ibus_sys::ibus_property_set_state(self.as_ref().to_glib_none().0, state.to_glib());
        }
    }

    fn set_sub_props<P: IsA<PropList>>(&self, prop_list: &P) {
        unsafe {
            ibus_sys::ibus_property_set_sub_props(self.as_ref().to_glib_none().0, prop_list.as_ref().to_glib_none().0);
        }
    }

    fn set_symbol<P: IsA<Text>>(&self, symbol: &P) {
        unsafe {
            ibus_sys::ibus_property_set_symbol(self.as_ref().to_glib_none().0, symbol.as_ref().to_glib_none().0);
        }
    }

    fn set_tooltip<P: IsA<Text>>(&self, tooltip: &P) {
        unsafe {
            ibus_sys::ibus_property_set_tooltip(self.as_ref().to_glib_none().0, tooltip.as_ref().to_glib_none().0);
        }
    }

    fn set_visible(&self, visible: bool) {
        unsafe {
            ibus_sys::ibus_property_set_visible(self.as_ref().to_glib_none().0, visible.to_glib());
        }
    }

    fn update<P: IsA<Property>>(&self, prop_update: &P) -> bool {
        unsafe {
            from_glib(ibus_sys::ibus_property_update(self.as_ref().to_glib_none().0, prop_update.as_ref().to_glib_none().0))
        }
    }

    fn connect_property_icon_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_icon_trampoline<P, F: Fn(&P) + 'static>(this: *mut ibus_sys::IBusProperty, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Property>
        {
            let f: &F = &*(f as *const F);
            f(&Property::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::icon\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_icon_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_label_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_label_trampoline<P, F: Fn(&P) + 'static>(this: *mut ibus_sys::IBusProperty, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Property>
        {
            let f: &F = &*(f as *const F);
            f(&Property::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::label\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_label_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_sensitive_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_sensitive_trampoline<P, F: Fn(&P) + 'static>(this: *mut ibus_sys::IBusProperty, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Property>
        {
            let f: &F = &*(f as *const F);
            f(&Property::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::sensitive\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_sensitive_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_state_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_state_trampoline<P, F: Fn(&P) + 'static>(this: *mut ibus_sys::IBusProperty, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Property>
        {
            let f: &F = &*(f as *const F);
            f(&Property::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::state\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_state_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_sub_props_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_sub_props_trampoline<P, F: Fn(&P) + 'static>(this: *mut ibus_sys::IBusProperty, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Property>
        {
            let f: &F = &*(f as *const F);
            f(&Property::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::sub-props\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_sub_props_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_symbol_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_symbol_trampoline<P, F: Fn(&P) + 'static>(this: *mut ibus_sys::IBusProperty, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Property>
        {
            let f: &F = &*(f as *const F);
            f(&Property::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::symbol\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_symbol_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_tooltip_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_tooltip_trampoline<P, F: Fn(&P) + 'static>(this: *mut ibus_sys::IBusProperty, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Property>
        {
            let f: &F = &*(f as *const F);
            f(&Property::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::tooltip\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_tooltip_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_visible_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_visible_trampoline<P, F: Fn(&P) + 'static>(this: *mut ibus_sys::IBusProperty, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Property>
        {
            let f: &F = &*(f as *const F);
            f(&Property::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::visible\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_visible_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for Property {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Property")
    }
}
