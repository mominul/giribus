// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::IsA;
use glib::translate::*;
use gobject;
use ibus_sys;
use std::fmt;
use Object;
use Service;

glib_wrapper! {
    pub struct EngineSimple(Object<ibus_sys::IBusEngineSimple, ibus_sys::IBusEngineSimpleClass, EngineSimpleClass>) @extends Service, Object, gobject::InitiallyUnowned;

    match fn {
        get_type => || ibus_sys::ibus_engine_simple_get_type(),
    }
}

pub const NONE_ENGINE_SIMPLE: Option<&EngineSimple> = None;

pub trait EngineSimpleExt: 'static {
    fn add_compose_file(&self, file: &str) -> bool;

    fn add_table(&self, data: &[u16], n_seqs: i32);

    fn add_table_by_locale(&self, locale: Option<&str>) -> bool;
}

impl<O: IsA<EngineSimple>> EngineSimpleExt for O {
    fn add_compose_file(&self, file: &str) -> bool {
        unsafe {
            from_glib(ibus_sys::ibus_engine_simple_add_compose_file(self.as_ref().to_glib_none().0, file.to_glib_none().0))
        }
    }

    fn add_table(&self, data: &[u16], n_seqs: i32) {
        let max_seq_len = data.len() as i32;
        unsafe {
            ibus_sys::ibus_engine_simple_add_table(self.as_ref().to_glib_none().0, data.to_glib_none().0, max_seq_len, n_seqs);
        }
    }

    fn add_table_by_locale(&self, locale: Option<&str>) -> bool {
        unsafe {
            from_glib(ibus_sys::ibus_engine_simple_add_table_by_locale(self.as_ref().to_glib_none().0, locale.to_glib_none().0))
        }
    }
}

impl fmt::Display for EngineSimple {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "EngineSimple")
    }
}
