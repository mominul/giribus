// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use gio;
use glib;
use glib::object::IsA;
use glib::translate::*;
use gobject;
use ibus_sys;
use std::fmt;
use Object;
use Service;

glib_wrapper! {
    pub struct Factory(Object<ibus_sys::IBusFactory, ibus_sys::IBusFactoryClass, FactoryClass>) @extends Service, Object, gobject::InitiallyUnowned;

    match fn {
        get_type => || ibus_sys::ibus_factory_get_type(),
    }
}

impl Factory {
    pub fn new(connection: &gio::DBusConnection) -> Factory {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ibus_sys::ibus_factory_new(connection.to_glib_none().0))
        }
    }
}

pub const NONE_FACTORY: Option<&Factory> = None;

pub trait FactoryExt: 'static {
    fn add_engine(&self, engine_name: &str, engine_type: glib::types::Type);

    //fn create_engine(&self, engine_name: &str) -> /*Ignored*/Option<Engine>;

    //fn connect_create_engine<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Factory>> FactoryExt for O {
    fn add_engine(&self, engine_name: &str, engine_type: glib::types::Type) {
        unsafe {
            ibus_sys::ibus_factory_add_engine(self.as_ref().to_glib_none().0, engine_name.to_glib_none().0, engine_type.to_glib());
        }
    }

    //fn create_engine(&self, engine_name: &str) -> /*Ignored*/Option<Engine> {
    //    unsafe { TODO: call ibus_sys:ibus_factory_create_engine() }
    //}

    //fn connect_create_engine<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored return value IBus.Engine
    //}
}

impl fmt::Display for Factory {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Factory")
    }
}
