// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::translate::*;
use glib::value::FromValue;
use glib::value::FromValueOptional;
use glib::value::SetValue;
use glib::value::Value;
use glib::StaticType;
use glib::Type;
use gobject_sys;
use ibus_sys;

bitflags! {
    pub struct BusNameFlag: u32 {
        const ALLOW_REPLACEMENT = 1;
        const REPLACE_EXISTING = 2;
        const DO_NOT_QUEUE = 4;
    }
}

#[doc(hidden)]
impl ToGlib for BusNameFlag {
    type GlibType = ibus_sys::IBusBusNameFlag;

    fn to_glib(&self) -> ibus_sys::IBusBusNameFlag {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ibus_sys::IBusBusNameFlag> for BusNameFlag {
    fn from_glib(value: ibus_sys::IBusBusNameFlag) -> BusNameFlag {
        skip_assert_initialized!();
        BusNameFlag::from_bits_truncate(value)
    }
}

impl StaticType for BusNameFlag {
    fn static_type() -> Type {
        unsafe { from_glib(ibus_sys::ibus_bus_name_flag_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for BusNameFlag {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for BusNameFlag {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_flags(value.to_glib_none().0))
    }
}

impl SetValue for BusNameFlag {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_flags(value.to_glib_none_mut().0, this.to_glib())
    }
}

bitflags! {
    pub struct Capabilite: u32 {
        const PREEDIT_TEXT = 1;
        const AUXILIARY_TEXT = 2;
        const LOOKUP_TABLE = 4;
        const FOCUS = 8;
        const PROPERTY = 16;
        const SURROUNDING_TEXT = 32;
    }
}

#[doc(hidden)]
impl ToGlib for Capabilite {
    type GlibType = ibus_sys::IBusCapabilite;

    fn to_glib(&self) -> ibus_sys::IBusCapabilite {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ibus_sys::IBusCapabilite> for Capabilite {
    fn from_glib(value: ibus_sys::IBusCapabilite) -> Capabilite {
        skip_assert_initialized!();
        Capabilite::from_bits_truncate(value)
    }
}

impl StaticType for Capabilite {
    fn static_type() -> Type {
        unsafe { from_glib(ibus_sys::ibus_capabilite_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for Capabilite {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for Capabilite {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_flags(value.to_glib_none().0))
    }
}

impl SetValue for Capabilite {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_flags(value.to_glib_none_mut().0, this.to_glib())
    }
}

bitflags! {
    pub struct InputHints: u32 {
        const NONE = 0;
        const SPELLCHECK = 1;
        const NO_SPELLCHECK = 2;
        const WORD_COMPLETION = 4;
        const LOWERCASE = 8;
        const UPPERCASE_CHARS = 16;
        const UPPERCASE_WORDS = 32;
        const UPPERCASE_SENTENCES = 64;
        const INHIBIT_OSK = 128;
        const VERTICAL_WRITING = 256;
    }
}

#[doc(hidden)]
impl ToGlib for InputHints {
    type GlibType = ibus_sys::IBusInputHints;

    fn to_glib(&self) -> ibus_sys::IBusInputHints {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ibus_sys::IBusInputHints> for InputHints {
    fn from_glib(value: ibus_sys::IBusInputHints) -> InputHints {
        skip_assert_initialized!();
        InputHints::from_bits_truncate(value)
    }
}

impl StaticType for InputHints {
    fn static_type() -> Type {
        unsafe { from_glib(ibus_sys::ibus_input_hints_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for InputHints {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for InputHints {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_flags(value.to_glib_none().0))
    }
}

impl SetValue for InputHints {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_flags(value.to_glib_none_mut().0, this.to_glib())
    }
}

bitflags! {
    pub struct ModifierType: u32 {
        const SHIFT_MASK = 1;
        const LOCK_MASK = 2;
        const CONTROL_MASK = 4;
        const MOD1_MASK = 8;
        const MOD2_MASK = 16;
        const MOD3_MASK = 32;
        const MOD4_MASK = 64;
        const MOD5_MASK = 128;
        const BUTTON1_MASK = 256;
        const BUTTON2_MASK = 512;
        const BUTTON3_MASK = 1024;
        const BUTTON4_MASK = 2048;
        const BUTTON5_MASK = 4096;
        const HANDLED_MASK = 16777216;
        const FORWARD_MASK = 33554432;
        const IGNORED_MASK = 33554432;
        const SUPER_MASK = 67108864;
        const HYPER_MASK = 134217728;
        const META_MASK = 268435456;
        const RELEASE_MASK = 1073741824;
        const MODIFIER_MASK = 1593843711;
    }
}

#[doc(hidden)]
impl ToGlib for ModifierType {
    type GlibType = ibus_sys::IBusModifierType;

    fn to_glib(&self) -> ibus_sys::IBusModifierType {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ibus_sys::IBusModifierType> for ModifierType {
    fn from_glib(value: ibus_sys::IBusModifierType) -> ModifierType {
        skip_assert_initialized!();
        ModifierType::from_bits_truncate(value)
    }
}

impl StaticType for ModifierType {
    fn static_type() -> Type {
        unsafe { from_glib(ibus_sys::ibus_modifier_type_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for ModifierType {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for ModifierType {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_flags(value.to_glib_none().0))
    }
}

impl SetValue for ModifierType {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_flags(value.to_glib_none_mut().0, this.to_glib())
    }
}

bitflags! {
    pub struct ObjectFlags: u32 {
        const IN_DESTRUCTION = 1;
        const DESTROYED = 2;
        const RESERVED_1 = 4;
        const RESERVED_2 = 8;
    }
}

#[doc(hidden)]
impl ToGlib for ObjectFlags {
    type GlibType = ibus_sys::IBusObjectFlags;

    fn to_glib(&self) -> ibus_sys::IBusObjectFlags {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ibus_sys::IBusObjectFlags> for ObjectFlags {
    fn from_glib(value: ibus_sys::IBusObjectFlags) -> ObjectFlags {
        skip_assert_initialized!();
        ObjectFlags::from_bits_truncate(value)
    }
}

impl StaticType for ObjectFlags {
    fn static_type() -> Type {
        unsafe { from_glib(ibus_sys::ibus_object_flags_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for ObjectFlags {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for ObjectFlags {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_flags(value.to_glib_none().0))
    }
}

impl SetValue for ObjectFlags {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_flags(value.to_glib_none_mut().0, this.to_glib())
    }
}

