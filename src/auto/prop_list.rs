// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::IsA;
use glib::translate::*;
use gobject;
use ibus_sys;
use std::fmt;
use Object;
use Property;
use Serializable;

glib_wrapper! {
    pub struct PropList(Object<ibus_sys::IBusPropList, ibus_sys::IBusPropListClass, PropListClass>) @extends Serializable, Object, gobject::InitiallyUnowned;

    match fn {
        get_type => || ibus_sys::ibus_prop_list_get_type(),
    }
}

impl PropList {
    pub fn new() -> PropList {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ibus_sys::ibus_prop_list_new())
        }
    }
}

impl Default for PropList {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_PROP_LIST: Option<&PropList> = None;

pub trait PropListExt: 'static {
    fn append<P: IsA<Property>>(&self, prop: &P);

    fn get(&self, index: u32) -> Option<Property>;

    fn update_property<P: IsA<Property>>(&self, prop: &P) -> bool;
}

impl<O: IsA<PropList>> PropListExt for O {
    fn append<P: IsA<Property>>(&self, prop: &P) {
        unsafe {
            ibus_sys::ibus_prop_list_append(self.as_ref().to_glib_none().0, prop.as_ref().to_glib_none().0);
        }
    }

    fn get(&self, index: u32) -> Option<Property> {
        unsafe {
            from_glib_none(ibus_sys::ibus_prop_list_get(self.as_ref().to_glib_none().0, index))
        }
    }

    fn update_property<P: IsA<Property>>(&self, prop: &P) -> bool {
        unsafe {
            from_glib(ibus_sys::ibus_prop_list_update_property(self.as_ref().to_glib_none().0, prop.as_ref().to_glib_none().0))
        }
    }
}

impl fmt::Display for PropList {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "PropList")
    }
}
