// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::IsA;
use glib::translate::*;
use gobject;
use ibus_sys;
use std::fmt;
use Object;

glib_wrapper! {
    pub struct Keymap(Object<ibus_sys::IBusKeymap, ibus_sys::IBusKeymapClass, KeymapClass>) @extends Object, gobject::InitiallyUnowned;

    match fn {
        get_type => || ibus_sys::ibus_keymap_get_type(),
    }
}

impl Keymap {
    pub fn new(name: &str) -> Keymap {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ibus_sys::ibus_keymap_new(name.to_glib_none().0))
        }
    }

    pub fn get(name: &str) -> Option<Keymap> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ibus_sys::ibus_keymap_get(name.to_glib_none().0))
        }
    }
}

pub const NONE_KEYMAP: Option<&Keymap> = None;

pub trait KeymapExt: 'static {
    fn lookup_keysym(&self, keycode: u16, state: u32) -> u32;
}

impl<O: IsA<Keymap>> KeymapExt for O {
    fn lookup_keysym(&self, keycode: u16, state: u32) -> u32 {
        unsafe {
            ibus_sys::ibus_keymap_lookup_keysym(self.as_ref().to_glib_none().0, keycode, state)
        }
    }
}

impl fmt::Display for Keymap {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Keymap")
    }
}
