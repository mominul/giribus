// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib_sys;
use gobject;
use ibus_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use Component;
use Object;
use ObservedPath;
use Serializable;

glib_wrapper! {
    pub struct Registry(Object<ibus_sys::IBusRegistry, ibus_sys::IBusRegistryClass, RegistryClass>) @extends Serializable, Object, gobject::InitiallyUnowned;

    match fn {
        get_type => || ibus_sys::ibus_registry_get_type(),
    }
}

impl Registry {
    pub fn new() -> Registry {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ibus_sys::ibus_registry_new())
        }
    }
}

impl Default for Registry {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_REGISTRY: Option<&Registry> = None;

pub trait RegistryExt: 'static {
    fn check_modification(&self) -> bool;

    fn get_components(&self) -> Vec<Component>;

    fn get_observed_paths(&self) -> Vec<ObservedPath>;

    fn load(&self);

    fn load_cache(&self, is_user: bool) -> bool;

    fn load_cache_file(&self, filename: &str) -> bool;

    fn load_in_dir(&self, dirname: &str);

    //fn output(&self, output: /*Ignored*/&mut glib::String, indent: i32);

    fn save_cache(&self, is_user: bool) -> bool;

    fn save_cache_file(&self, filename: &str) -> bool;

    fn start_monitor_changes(&self);

    fn connect_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Registry>> RegistryExt for O {
    fn check_modification(&self) -> bool {
        unsafe {
            from_glib(ibus_sys::ibus_registry_check_modification(self.as_ref().to_glib_none().0))
        }
    }

    fn get_components(&self) -> Vec<Component> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ibus_sys::ibus_registry_get_components(self.as_ref().to_glib_none().0))
        }
    }

    fn get_observed_paths(&self) -> Vec<ObservedPath> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ibus_sys::ibus_registry_get_observed_paths(self.as_ref().to_glib_none().0))
        }
    }

    fn load(&self) {
        unsafe {
            ibus_sys::ibus_registry_load(self.as_ref().to_glib_none().0);
        }
    }

    fn load_cache(&self, is_user: bool) -> bool {
        unsafe {
            from_glib(ibus_sys::ibus_registry_load_cache(self.as_ref().to_glib_none().0, is_user.to_glib()))
        }
    }

    fn load_cache_file(&self, filename: &str) -> bool {
        unsafe {
            from_glib(ibus_sys::ibus_registry_load_cache_file(self.as_ref().to_glib_none().0, filename.to_glib_none().0))
        }
    }

    fn load_in_dir(&self, dirname: &str) {
        unsafe {
            ibus_sys::ibus_registry_load_in_dir(self.as_ref().to_glib_none().0, dirname.to_glib_none().0);
        }
    }

    //fn output(&self, output: /*Ignored*/&mut glib::String, indent: i32) {
    //    unsafe { TODO: call ibus_sys:ibus_registry_output() }
    //}

    fn save_cache(&self, is_user: bool) -> bool {
        unsafe {
            from_glib(ibus_sys::ibus_registry_save_cache(self.as_ref().to_glib_none().0, is_user.to_glib()))
        }
    }

    fn save_cache_file(&self, filename: &str) -> bool {
        unsafe {
            from_glib(ibus_sys::ibus_registry_save_cache_file(self.as_ref().to_glib_none().0, filename.to_glib_none().0))
        }
    }

    fn start_monitor_changes(&self) {
        unsafe {
            ibus_sys::ibus_registry_start_monitor_changes(self.as_ref().to_glib_none().0);
        }
    }

    fn connect_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn changed_trampoline<P, F: Fn(&P) + 'static>(this: *mut ibus_sys::IBusRegistry, f: glib_sys::gpointer)
            where P: IsA<Registry>
        {
            let f: &F = &*(f as *const F);
            f(&Registry::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(changed_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for Registry {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Registry")
    }
}
