// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use gio;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib_sys;
use ibus_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct Proxy(Object<ibus_sys::IBusProxy, ibus_sys::IBusProxyClass, ProxyClass>) @extends gio::DBusProxy, @implements gio::AsyncInitable, gio::DBusInterface, gio::Initable;

    match fn {
        get_type => || ibus_sys::ibus_proxy_get_type(),
    }
}

pub const NONE_PROXY: Option<&Proxy> = None;

pub trait ProxyExt: 'static {
    fn destroy(&self);

    fn connect_destroy<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Proxy>> ProxyExt for O {
    fn destroy(&self) {
        unsafe {
            ibus_sys::ibus_proxy_destroy(self.as_ref().to_glib_none().0);
        }
    }

    fn connect_destroy<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn destroy_trampoline<P, F: Fn(&P) + 'static>(this: *mut ibus_sys::IBusProxy, f: glib_sys::gpointer)
            where P: IsA<Proxy>
        {
            let f: &F = &*(f as *const F);
            f(&Proxy::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"destroy\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(destroy_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for Proxy {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Proxy")
    }
}
